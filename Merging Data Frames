Mergind_DataFramesMerging DataFrames

append() - vertical or horizontally
concat() - vertically as well as horizontally, NaN can be taken using dropna or keys

pd.merge()
merge acts likes the concat with advance options
 - from the experience and knowledge, i have noticed
 -  concat with all advance options is equal to merge
 
 
 e.g. pd.merge(cities, population)
 - if columns are not same in dataframe, and only one is same
 		- inner join
 - when two dataframes as same column-names then merge will yield empty merge-output.
		pd.merge(bronze, gold, on ='NOC')
		- it means (name of country columns) are to be merged
		-  the columns are defined with _x for dataframe-1 and  _y for dataframe-2
 - merging on multiple columns
  - pd.merge(bronze, gold, on = ['NOC', 'Country'])
 - merging on multiple columns with suffixs
  - pd.merge((bronze, gold, on = ['NOC', 'Country'], suffixes=['_bronze', '_gold'])

merge with no columns match
- specifying columns to merge
- pd.merge(counties, cities, left_on = 'CITY NAME', right_on='City')

Merging on multiple columns
Another strategy to disambiguate cities with identical names is to add information on the states in which the cities are located. To this end, you add a column called state to both DataFrames from the preceding exercises. Again, pandas has been pre-imported as pd and the revenue and managers DataFrames are in your namespace.

Your goal in this exercise is to use pd.merge() to merge DataFrames using multiple columns (using 'branch_id', 'city', and 'state' in this case).

Are you able to match all your company's branches correctly?

# Add 'state' column to revenue: revenue['state']
revenue['state'] = ['TX','CO','IL','CA']

# Add 'state' column to managers: managers['state']
managers['state'] = ['TX','CO','CA','MO']

# Merge revenue & managers on 'branch_id', 'city', & 'state': combined
combined = pd.merge(revenue, managers, on=['branch_id','city','state'])

# Print combined
print(combined)

